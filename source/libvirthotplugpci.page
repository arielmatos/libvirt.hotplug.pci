Menu="VMs:3"
Title="Libvirt Hotplug PCI Devices"
Icon="libvirt.hotplug.pci.png"
---
<?PHP
/* Copyright 2016, Burhan Shakil
 * Copyright 2018, Dan Landon
 * Copyright 2018, Ariel Matos
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 3,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>

<?
require_once('/usr/local/emhttp/webGui/include/Helpers.php');
if (is_dir('/usr/local/emhttp/plugins/dynamix.vm.manager/classes')) {
	require_once('/usr/local/emhttp/plugins/dynamix.vm.manager/classes/libvirt.php');
	require_once('/usr/local/emhttp/plugins/dynamix.vm.manager/classes/libvirt_helpers.php');
} else {
	require_once('/usr/local/emhttp/plugins/dynamix.vm.manager/include/libvirt.php');
	require_once('/usr/local/emhttp/plugins/dynamix.vm.manager/include/libvirt_helpers.php');
}
//$arrValidUSBDevices = getValidUSBDevices();
$arrValidPCIDevices = getValidPCIDevices();
$uuid = $_GET['uuid'];

//Get domain variables for each domain
$doms = $lv->get_domains();
$vmlist=array();

for ($i = 0; $i < sizeof($doms); $i++)
{
	global $vmlist;
	$name = $doms[$i];
	$res = $lv->get_domain_by_name($name);
	$dom = $lv->domain_get_info($res);
	$state = $lv->domain_state_translate($dom['state']);
	if($state=='running')
	{
		global $vmlist;
		$vmlist[]=array('name'=>$name);
	}
}


function list_vms() {
  global $vmlist;
  return $vmlist;
}

function list_usbs()
{
  global $arrValidPCIDevices;
  $out = array();
  	if (!empty($arrValidPCIDevices))
  	{
  		foreach($arrValidPCIDevices as $i => $arrDev)
   		{
   			$out[] = array('name'=>$arrDev['name'],'id'=>$arrDev['id']);
   		}
  	}
	else
	{
		$out[] = array('name'=>"None available");
	}
  return $out;
}
?>

<script>
var URL = '/plugins/libvirt.hotplug.pci/include/virshcmd.php';

function operateUSB(action)
{
	var vms = $("select[name=vms] option:selected").val();
	var usbs = $("select[name=usbs] option:selected").val();
	if (vms && usbs) {
		switch (action) {
			case 'detach':
				status = 'Detaching Please wait...';
				break;

			case 'attach':
				status = 'Attaching Please wait...';
				break;
		}
		$("textarea[name=Status]").val(status);
		$("#detach").attr("disabled", true);
		$("#attach").attr("disabled", true);
		var opts = new Object();
		opts["action"] = action;
		opts["VMNAME"] = vms;
		opts["USBID"] = usbs;
		$.post(URL,opts).done(function(data){
			if (data) {
				$("textarea[name=Status]").val(data.substr(1));
			}
			$("#detach").attr("disabled", false);
			$("#attach").attr("disabled", false);
		});
	} else {
		if (! vms) {
			$("textarea[name=Status]").val('No VM Selected!');
		} else {
			$("textarea[name=Status]").val('No USB devices!');
		}
	}
}
</script>

<div style="width: 80%; float:left">
	<p>
		Running VMs:
		<select name="vms" size="1">
			<?foreach (list_vms() as $vms):?>
			<?=mk_option("",$vms['name'],$vms['name'])?>
			<?endforeach;?>
		</select>

		USB Devices:
		<select name="usbs" size="1">
			<?foreach (list_usbs() as $usb):?>
			<?=mk_option("",$usb['id'],$usb['name'])?>
			<?endforeach;?>
		</select>

		<input type="button" value="Detach" onclick="operateUSB('detach');" id="detach" style="margin-top:0">
		<input type="button" value="Attach" onclick="operateUSB('attach');" id="attach" style="margin-top:0">
	</p>

	<div>
		Status:
	</div>
	<div>
		<textarea readonly name="Status" rows="5"></textarea>
	</div>
	<div>
		<p>Select the VM for the PCI device to be attached/detached and the PCI device for the selected VM.</p>
		<p><strong>Note:</strong></p>
		<p>Some PCI Devices require detaching and attaching multiple times to be properly detected by VMs.</p>
		<p>If you have disconnected the device while it was attached to a VM, you will have to detach it and then re-attach it.</p>
	</div>
</div>
<div style="width: 80%; float:left">
<input type="button" value="Refresh" onclick="refresh()">
</div>

